// Code generated by swaggo/swag. DO NOT EDIT.

package enrichstorage

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/records/create": {
            "post": {
                "description": "Создание новой записи на обогащение",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "records"
                ],
                "summary": "Новая запись",
                "parameters": [
                    {
                        "description": "ФИО",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Запись успешно создана"
                    }
                }
            }
        },
        "/records/delete": {
            "post": {
                "description": "Удаление записи о ФИО",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "records"
                ],
                "summary": "Удалить запись",
                "parameters": [
                    {
                        "description": "ФИО",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delete.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Запись успешно удалена"
                    }
                }
            }
        },
        "/records/get": {
            "get": {
                "description": "Получение данных с различными фильтрами и пагинацией",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "records"
                ],
                "summary": "Получение данных",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name =",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "surname =",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "patronymic =",
                        "name": "patronymic",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "age \u003e=",
                        "name": "age[gte]",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "age \u003c=",
                        "name": "age[lte]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sex =",
                        "name": "sex",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "nationality =",
                        "name": "nationality",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit =",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "after =",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "before =",
                        "name": "before",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "resp",
                        "schema": {
                            "$ref": "#/definitions/get.response"
                        }
                    }
                }
            }
        },
        "/records/update": {
            "post": {
                "description": "Обновление записи для ФИО",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "records"
                ],
                "summary": "Обновить запись",
                "parameters": [
                    {
                        "description": "ФИО",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Запись успешно изменена"
                    }
                }
            }
        }
    },
    "definitions": {
        "create.request": {
            "type": "object",
            "required": [
                "name",
                "surname"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "delete.request": {
            "type": "object",
            "required": [
                "name",
                "surname"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "get.response": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get.responseRecord"
                    }
                },
                "paging": {
                    "type": "object",
                    "properties": {
                        "next": {
                            "type": "string"
                        },
                        "previous": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "get.responseRecord": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "update.request": {
            "type": "object",
            "required": [
                "name",
                "surname"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 130,
                    "minimum": 0
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Enricher",
	Description:      "Сервис, который будет получать ФИО, из открытых апи обогащать ответ наиболее вероятными возрастом, полом и национальностью.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
