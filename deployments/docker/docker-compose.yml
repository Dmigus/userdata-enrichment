version: "2.27.0"
services:
  enricher:
    build:
      context: ../../
      dockerfile: ./enricher/Dockerfile
    stop_signal: SIGTERM
    depends_on:
      rabbitmq:
        condition: service_started
      enrichstorage:
        condition: service_started
    environment:
      REQUEST_EVENT_BUS_BROKERS: ${REQUEST_EVENT_BUS_BROKERS}
      REQUEST_EVENT_BUS_TOPIC: ${REQUEST_EVENT_BUS_TOPIC}
      AGIFY_ADDRESS: ${AGIFY_ADDRESS}
      GENDERIZE_ADDRESS: ${GENDERIZE_ADDRESS}
      NATIONALITY_ADDRESS: ${NATIONALITY_ADDRESS}
      ENRICH_STORAGE_ADDRESS: ${ENRICH_STORAGE_ADDRESS}
      REQUEST_EVENT_BUS_USERNAME: ${REQUEST_EVENT_BUS_READER_USERNAME}
      REQUEST_EVENT_BUS_PASSWORD: ${REQUEST_EVENT_BUS_READER_PASSWORD}
#    networks:
#      - broker

  enrichstorage:
    build:
      context: ../../
      dockerfile: ./enrichstorage/Dockerfile
    ports:
      - "8081:8081"
    stop_signal: SIGTERM
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started

    environment:
      REQUEST_EVENT_BUS_BROKERS: ${REQUEST_EVENT_BUS_BROKERS}
      REQUEST_EVENT_BUS_TOPIC: ${REQUEST_EVENT_BUS_TOPIC}
      REQUEST_EVENT_BUS_BATCH_SIZE: ${REQUEST_EVENT_BUS_BATCH_SIZE}
      REQUEST_EVENT_BUS_BATCH_INTERVAL: ${REQUEST_EVENT_BUS_BATCH_INTERVAL}
      GRPCPORT: ${GRPCPORT}
      HTTPPORT: ${HTTPPORT}
      STORAGE_HOST: ${STORAGE_HOST}
      STORAGE_PORT: ${STORAGE_PORT}
      STORAGE_DATABASE: ${STORAGE_DATABASE}
      STORAGE_USER: ${STORAGE_USER}
      STORAGE_PASSWORD: ${STORAGE_PASSWORD}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_ROLES_TO_PERMIT: ${KEYCLOAK_ROLES_TO_PERMIT}
      REQUEST_EVENT_BUS_USERNAME: ${REQUEST_EVENT_BUS_WRITER_USERNAME}
      REQUEST_EVENT_BUS_PASSWORD: ${REQUEST_EVENT_BUS_WRITER_PASSWORD}
#    networks:
#      - database
#      - broker



  postgres:
    image: postgres:16.2-bullseye
    ports:
      - "5432:5432"
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: ${STORAGE_PASSWORD?err}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 1s
      retries: 5
#    networks:
#      - database

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
#    networks:
#      - broker
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      DYNAMIC_CONFIG_ENABLED: "true"

  kafka0:
    image: confluentinc/cp-kafka:7.6.0
    ports:
      - "9092:9092"
#    networks:
#      - broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: c5XfbUtrQi6vugAAcm85kQ
    healthcheck:
      test: [ "CMD-SHELL", "cub kafka-ready -b kafka0:29092 1 30" ]
      interval: 1s
      timeout: 10s
      retries: 5

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      kafka0:
        condition: service_healthy
    command: "kafka-topics --create --topic requests --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka0:29092"
#    networks:
#      - broker

#networks:
#  broker:
#    name: broker-net
#    driver: bridge
#  database:
#    name: db-net
#    driver: bridge

  keycloak:
    image: keycloak/keycloak:25.0.0
    ports:
      - "8085:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      KC_HEALTH_ENABLED: true
    command:
      - start-dev
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3" ]
      interval: 5s
      timeout: 5s
      retries: 3

  keycloak-init:
    image: keycloak/keycloak:25.0.0
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      KEYCLOAK_URL: ${KEYCLOAK_URL}
    depends_on:
      keycloak:
        condition: service_healthy
    entrypoint: /keycloak-setup/script.sh
    volumes:
      - ./keycloak-setup:/keycloak-setup

  rabbitmq:
    image: rabbitmq:3.13.3-management
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_CONFIG_FILE=/rabbit-setup/conf/rabbitmq.conf
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ./rabbit-mq:/rabbit-setup



